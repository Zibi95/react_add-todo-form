{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","api/todos.ts","utils/appHelper.ts","App.tsx","index.tsx"],"names":["UserInfo","user","className","href","email","name","TodoInfo","todo","completed","id","title","TodoList","todos","map","username","userId","getUser","usersFromServer","find","initialFormValues","selectedUser","initialFormErrors","App","useState","formInputValues","setFormInputValues","formInputErrors","setFormInputErrors","todosFromServer","setTodos","titleError","selectedUserError","handleChange","e","target","value","test","prevState","action","method","onSubmit","preventDefault","newTodo","reduce","acc","curr","Math","max","prevTodos","htmlFor","type","placeholder","onChange","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e5d24cf5.chunk.js","sourcesContent":["export type User = {\n  id: number,\n  name: string,\n  email: string,\n};\n\ntype UserProps = {\n  user: User,\n};\n\nexport const UserInfo = ({ user }: UserProps) => (\n  <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n    {user.name}\n  </a>\n);\n","import { UserInfo, User } from '../UserInfo';\n\nexport type Todo = {\n  id: number,\n  userId: number,\n  title: string,\n  completed: boolean,\n  user: User | null,\n};\n\ntype TodoProps = {\n  todo: Todo,\n};\n\nexport const TodoInfo = ({ todo }: TodoProps) => (\n  <article\n    className={\n      todo.completed\n        ? 'TodoInfo TodoInfo--completed'\n        : 'TodoInfo'\n    }\n    data-id={todo.id}\n  >\n    <h2 className=\"TodoInfo__title\">{todo.title}</h2>\n    {todo.user && <UserInfo user={todo.user} />}\n  </article>\n);\n","import { TodoInfo, Todo } from '../TodoInfo';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nexport const TodoList = ({ todos }: TodoListProps) => (\n  <section className=\"TodoList\">\n    {\n      todos.map(todo => <TodoInfo todo={todo} key={todo.id} />)\n    }\n  </section>\n);\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import usersFromServer from '../api/users';\nimport todosFromServer from '../api/todos';\n\nexport const getUser = (userId: number) => {\n  return usersFromServer.find((user) => user.id === userId) ?? null;\n};\n\nexport const getNewId = () => {\n  return todosFromServer.reduce((acc, curr) => Math.max(acc, curr.id), 0) + 1;\n};\n\nexport const getTodos = () => todosFromServer.map((todo) => ({\n  ...todo,\n  user: getUser(todo.userId),\n}));\n\nexport const validateTitleInput = (string: string) => {\n  const regexForOnlyEnRuWords = /^[a-zA-Zа-яА-ЯёЁ\\d\\s]*$/;\n\n  return regexForOnlyEnRuWords.test(string);\n};\n","import { FormEventHandler, useState, ChangeEvent } from 'react';\nimport './App.scss';\nimport { TodoList } from './components/TodoList';\n\nimport usersFromServer from './api/users';\n\nimport {\n  getUser,\n  getNewId,\n  getTodos,\n  validateTitleInput,\n} from './utils/appHelper';\n\ntype FormInputErrors = {\n  title: boolean,\n  selectedUser: boolean;\n};\n\nconst initialFormValues = {\n  title: '',\n  selectedUser: 0,\n};\n\nconst initialFormErrors: FormInputErrors = {\n  title: false,\n  selectedUser: false,\n};\n\nexport const App = () => {\n  const [formInputValues, setFormInputValues] = useState(initialFormValues);\n  const [formInputErrors, setFormInputErrors] = useState(initialFormErrors);\n  const [todos, setTodos] = useState(getTodos());\n\n  const { title, selectedUser } = formInputValues;\n  const {\n    title: titleError,\n    selectedUser: selectedUserError,\n  } = formInputErrors;\n\n  const handleSubmit: FormEventHandler = (e) => {\n    e.preventDefault();\n\n    if (!title || !selectedUser) {\n      setFormInputErrors({\n        title: !title,\n        selectedUser: !selectedUser,\n      });\n\n      return;\n    }\n\n    const newTodo = {\n      id: getNewId(),\n      title,\n      completed: false,\n      userId: selectedUser,\n      user: getUser(selectedUser),\n    };\n\n    setTodos((prevTodos) => [...prevTodos, newTodo]);\n\n    setFormInputValues(initialFormValues);\n  };\n\n  const handleChange = (\n    e: ChangeEvent<HTMLInputElement | HTMLSelectElement>,\n  ) => {\n    const { name, value } = e.target;\n\n    if (name === 'title' && !validateTitleInput(value)) {\n      return;\n    }\n\n    setFormInputErrors(prevState => ({\n      ...prevState,\n      [name]: prevState[name as keyof FormInputErrors] ? !value : false,\n    }));\n\n    setFormInputValues(prevState => ({\n      ...prevState,\n      [name]: name === 'title' ? value : +value,\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/users\" method=\"POST\" onSubmit={handleSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"title\">Title:</label>\n\n          {' '}\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Title\"\n            value={title}\n            id=\"title\"\n            name=\"title\"\n            onChange={handleChange}\n          />\n\n          {' '}\n\n          {titleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">User:</label>\n\n          {' '}\n\n          <select\n            data-cy=\"userSelect\"\n            id=\"user\"\n            name=\"selectedUser\"\n            value={selectedUser}\n            onChange={handleChange}\n          >\n            <option value=\"0\" disabled>\n              Choose a user\n            </option>\n            {\n              usersFromServer.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))\n            }\n          </select>\n\n          {' '}\n\n          {\n            selectedUserError\n              && <span className=\"error\">Please choose a user</span>\n          }\n\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">Add</button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}